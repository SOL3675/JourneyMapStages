plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
}

version = "${mod_version}" + getBuildNumber()
group = "${mod_group}"
archivesBaseName = "${mod_name}-${version_minecraft}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'official', version: "${version_minecraft}"
    
runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'jmapstages'
            mods {
                jmapstages {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'jmapstages'

            mods {
                jmapstages {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'jmapstages'

            mods {
                jmapstages {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'jmapstages', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                jmapstages {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {

    maven {

        url 'https://dvs1.progwml6.com/files/maven'
    }
    
    maven {
    
        url 'https://maven.blamejared.com'
    }
    
    maven {
    
        url 'https://cursemaven.com'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${version_minecraft}-${version_forge}"

    implementation fg.deobf(group: 'net.darkhax.bookshelf', name: 'Bookshelf-Forge-1.19.2', version: "${version_bookshelf}")
    implementation fg.deobf(group: 'net.darkhax.gamestages', name: 'GameStages-Forge-1.19.2', version: "${version_gamestages}")
    implementation fg.deobf(group: 'com.blamejared.crafttweaker', name: 'CraftTweaker-forge-1.19.2', version: "${version_crafttweaker}")
    implementation fg.deobf('curse.maven:journeymap-32274:4437152')
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "${mod_id}",
                "Specification-Vendor"    : "darkhax",
                "Specification-Version"   : "${version}",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "darkhax",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

String getBuildNumber() {

    return System.getenv('BUILD_NUMBER') ? System.getenv('BUILD_NUMBER') : System.getenv('TRAVIS_BUILD_NUMBER') ? System.getenv('TRAVIS_BUILD_NUMBER') : '0';
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

/*
curseforge {

    apiKey = findProperty('curse_auth') ?: 0 
    def versions = "${curse_versions}".split(', ')

    project {

        id = "${curse_project}"
        releaseType = 'alpha'
        changelog = getGitChangelog() + "\n\nHuge thanks to my supporters on [Patreon](https://www.patreon.com/Darkhax?MCChangelog?${mod_class})\n\n" + getPledgeLog()
        changelogType = 'markdown'

        versions.each {

            addGameVersion "${it}"
        }

        if (project.hasProperty('curse_requirements') || project.hasProperty('curse_optionals')) {

            mainArtifact(jar) {

                relations {

                    if (project.hasProperty('curse_requirements')) {
                        def requirements = "${curse_requirements}".split(', ')
                        requirements.each {

                            requiredLibrary "${it}"
                        }
                    }

                    if (project.hasProperty('curse_optionals')) {
                        def optionals = "${curse_optionals}".split(', ')
                        optionals.each {

                            optionalLibrary "${it}"
                        }
                    }
                }
            }
        }

        addArtifact(sourcesJar)
        addArtifact(javadocJar)
        addArtifact(deobfJar)
    }
}


task signJar(type: SignJar, dependsOn: reobfJar) {

    onlyIf {
    
        project.hasProperty('keyStore')
    }
    
    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

build.dependsOn signJar
*/